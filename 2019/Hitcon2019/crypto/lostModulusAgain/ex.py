import gmpy2

from Crypto.Util.number import *


def find_phi(e, d):
    kfi = e * d - 1
    k = kfi / (int(d * 3))
    print('start k', k)
    while True:
        fi = kfi / k
        try:
            d0 = gmpy2.invert(e, fi)
            if d == d0:
                yield fi
        except:
            pass
        finally:
            k += 1


def solve_for_phi(ipmq, iqmp, possible_phi):
    a = iqmp - 1
    b = ipmq + iqmp - 2 - possible_phi
    c = ipmq * possible_phi - possible_phi
    delta = b ** 2 - 4 * a * c
    if delta > 0:
        r, correct = gmpy2.iroot(delta, 2)
        if correct:
            x1 = (-b - r) / (2 * a)
            x2 = (-b + r) / (2 * a)
            if gmpy2.is_prime(x1 + 1):
                q = x1 + 1
                p = possible_phi / x1 + 1
                return p, q
            elif gmpy2.is_prime(x2 + 1):
                q = x2 + 1
                p = possible_phi / x2 + 1
                return p, q


def main():
    e = 1048583
    d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
    ipmq = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
    iqmp = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331
    ct = 0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703
    for potential_phi in find_phi(e, d):
        res = solve_for_phi(ipmq, iqmp, potential_phi)
        if res:
            p, q = res
            n = p * q
            print(long_to_bytes(pow(ct, d, n)))
            break


main()


def sanity():
    from Crypto.Util.number import getPrime
    e = 65537
    bits = 1024
    p = getPrime(bits)
    q = getPrime(bits)
    ipmq = gmpy2.invert(p, q)
    iqmp = gmpy2.invert(q, p)
    phi = (p - 1) * (q - 1)
    d = gmpy2.invert(e, phi)
    n = p * q

    X = p - 1
    Y = q - 1
    assert (phi == X * Y)
    assert (phi == ipmq * X + ipmq + iqmp * Y + iqmp - 1 - (X + 1 + Y))
    assert (phi == ipmq * (phi / Y) + ipmq + iqmp * Y + iqmp - 1 - ((phi / Y) + 1 + Y))
    assert (phi * Y == ipmq * phi + ipmq * Y + iqmp * Y ** 2 + iqmp * Y - Y - (phi + Y + Y ** 2))
    assert (phi * Y == Y ** 2 * (iqmp - 1) + Y * (ipmq + iqmp - 1 - 1) + ipmq * phi - phi)
    assert (Y ** 2 * (iqmp - 1) + Y * (ipmq + iqmp - 2 - phi) + ipmq * phi - phi == 0)
    assert ((p, q) == solve_for_phi(ipmq, iqmp, phi))

    for potential_phi in find_phi(e, d):
        res = solve_for_phi(ipmq, iqmp, potential_phi)
        if res:
            assert ((p, q) == res)
            break


'''

from Crypto.Util.number import *
from z3 import *
import gmpy2
import math

gmpy2.get_context().precision=5000

x = gmpy2.mpfr(2288639062717320244446862640664227495902863511654362699529768467130584843691006460241801280859595132551984491847891209003947053064985777585495946250091902937121500017906518567313664214306168984933822811090993144511687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743)

y = gmpy2.mpfr(138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331)

d = gmpy2.mpfr(20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927)

def find_phi(e, d):
    kfi = gmpy2.mpfr(e * d - 1)
    k = kfi / (int(d * 3))
    print('start k', k)
    while True:
        fi = kfi / k
        try:
            d0 = gmpy2.invert(e, fi)
            if d == d0:
                yield fi
        except:
            pass
        finally:
            k += 1

def solve_for_phi(ipmq, iqmp, possible_phi):
    a = iqmp - 1
    b = ipmq + iqmp - 2 - possible_phi
    c = ipmq * possible_phi - possible_phi
    delta = b ** 2 - 4 * a * c
    if delta > 0:
        r, correct = gmpy2.iroot(delta, 2)
        if correct:
            x1 = (-b - r) / (2 * a)
            x2 = (-b + r) / (2 * a)
            if gmpy2.is_prime(x1 + 1):
                q = x1 + 1
                p = possible_phi / x1 + 1
                return p, q
            elif gmpy2.is_prime(x2 + 1):
                q = x2 + 1
                p = possible_phi / x2 + 1
                return p, q


def main():
    e = 1048583
    d = 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927
    ipmq = 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743
    iqmp = 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331
    ct = 0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703
    for potential_phi in find_phi(e, d):
        res = solve_for_phi(ipmq, iqmp, potential_phi)
        if res:
            p, q = res
            n = p * q
            print(long_to_bytes(pow(ct, d, n)))
            break
main()

gmpy2.get_context().precision=5000

x = gmpy2.mpfr(2288639062717320244446862640664227495902863511654362699529768467130584843691006460241801280859595132551984491847891209003947053064985777585495946250091902937121500017906518567313664214306168984933822811090993144511687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743)

y = gmpy2.mpfr(138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331)

d = gmpy2.mpfr(20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927)

e = 1048583

def getFlag(k0):
	phi = (e*d - 1)/k0
	return 
	

def solve(k0):
	#s = Solver()
	#k2 = Int("k2")
	# phi = (e*d - 1)/k0
	
	#(x - 1) * k1 ** 2 + (x * y - 1 - phi(n) + (x - 1) * (y - 1)) * k1 + (y - 1) * (x * y - 1) = 0
	
	#s.add((y-1)*k2**2 + ((x*y - 1) + (x-1)*(y-1) - (e*d -1)//k0)*k2 + (x-1)*(x*y - 1) == 0)
	#a = (y-1)
	#b = ((x*y - 1) + (x-1)*(y-1) - (e*d -1)/(k0+1))
	#c = (x-1)*(x*y - 1)
	
	a = (x - 1)
	b = (x * y - 1 - (e*d - 1)/k0 + (x - 1) * (y - 1))
	c = (x-1)*(x*y - 1)
	
	#print(b)
	if b % 1 != 0:
		return -1
	
	#print(c)
	#print("{}\n{}\n{}\n".format(a,b,c))
	#print(gmpy2.sqrt((pow(b, 2) - 4*a*c)))
	#idx = str(pow(b, 2)).index(".")
	#print(str(pow(b, 2))[idx-2:])
	#print(4*a*c - pow(b, 2))
	s1 = -b + gmpy2.sqrt((pow(b, 2) - 4*a*c))
	s2 = -b + gmpy2.sqrt((pow(b, 2) + 4*a*c))

	s1 /= (2*a)
	s2 /= (2*a)
	if s1 % 1 != 0:
		return -1
	elif s2 % 1 != 0:
		return s1
	else:
		print("gotit!!")
		return s1, s2


for i in range(1,e):
	res = solve(i)
	#print(gmpy2.mpfr(3.000000000))	
	#print(x)
	#print(y)
	#print(d)
	#break
	if i % 10000 == 0 :
		print("[{}]".format(i))
	if res != -1:
		print("[{}]".format(i))
		print("ok!")
		print(res)
		break

e = BitVec("e", 1024)
p = BitVec("p", 1024)
q = BitVec("q", 1024)
n = BitVec("n", 2048)
phi = BitVec("phi", 2048)
d = BitVec("d", 2048)
x = BitVec("x", 1024)
y = BitVec("y", 1024)
'''

'''
e, d = Ints("e d")
#p, q = Ints("p q")
x, y = Ints("x y")
n, phi = Ints("n phi")

k0, k1, k2 = Ints("k0 k1 k2")

def isPrime(a0):
    a1, a2 = Ints("a1 a2")
    return And(a0 > 1, Not(Exists([a1,a2], And(a1 < a0, a2 < a0, a1 > 1, a2 > 1, a0 == a1*a2))))
    

s = Solver()

c = 0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703
s.add(e == 1048583)
s.add(d == 20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927)
s.add(x == 22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743)
s.add(y == 138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331)
#s.add(n == p*q)
#s.add(phi == (p-1)*(q-1))
#s.add(e*d == k0*phi + 1)
#s.add(x*q == k1*p + 1) # x = q^-1 mod p
#s.add(y*p == k2*q + 1) # y = p^-1 mod q

#s.add(x < p)
#s.add(y < q)
#s.add(q > k1)
#s.add(p > k2)
s.add(k1 > 0)
s.add(k2 > 0)

#s.add(x*q == k1*p + 1) # x = q^-1 mod p
#s.add(y*p == k2*q + 1) # y = p^-1 mod q

# x * (y+k1) == k1 * (x+k2) + 1
# x*y  == k1*k2  + 1 

# k1 = (x*y - 1)/k2

# ed = k0*phi + 1
# phi = (e*d - 1)/k0

# y*(x+k2) == k2*(y+k1) + 1
# x*y + y*k2 == k2*y k1*k2 + 1

s.add(d > k0)
s.add(e > k0)
s.add(e < phi)
s.add(d < phi)
s.add(phi == (e*d -1)/k0)
#s.add(isPrime(p))
#s.add(isPrime(q))

p = simplify(x+k2)
q = simplify(y+k1)#simplify((x*y - 1)/k2)#
#s.add(p == x+k2)
#s.add(q == y+(x*y - 1)/k2)


s.add(k1 == (x*y - 1)/k2)

s.add(x*q == k1*p + 1)
s.add(y*p == k2*q + 1)
s.add(n == p*q)

s.add(n % 2 != 0)


s.add(n % 3 != 0)


s.add(n % 5 != 0)

#s.add(phi == (p-1)*(q-1))
#s.add(phi == (x+k2)(y+k1) - (y+k1) - (x+k2) + 1)
#s.add(e*d-1 == k0*phi)
# phi == xy + k2*y + k1*x + k1*k2 - y - k1 - x - k2 + 1
# phi == xy + k2*y + k1*x + k1*k2 - y - k1 - x - k2 + 1
#s.add(phi == (y+(x*y - 1)/k2-1)*k2 + x*y + (x*y - 1)/k2*x - y - (x*y - 1)/k2 - x + 1)
s.add(0 == (y-1)*k2**2 + (x-1)*(x*y - 1) + ((x*y - 1) + (x-1)*(y-1))*k2 - phi*k2)

if s.check() != sat :
	exit(1)
#print(s)
print(s.model())
m = s.model()
res = pow(c,m[d].as_long(),m[phi].as_long())
print(long_to_bytes(res))
'''
